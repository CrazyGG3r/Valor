import torch
import random
import numpy as np 
from collections import deque 
from game import sdfwaef
from model import Linear_Qnet, Qtrainer
from helper import plot
MAX_Memory= 10_000
BATCH_Size= 1000

LR=0.001

class Agent:
    def __init__(self):
        self.ngames=0
        self.epsilon= 0 #control randomness
        self.gamma=0.9 #discount rate 
        self.memroy= deque(maxlen=MAX_Memory)
        self.model = Linear_Qnet(11,256,3) #not confirmed values so please check 
        self.trainer = Qtrainer(self.model, lr=LR, gamma=self.gamma)
        #TODO: model, trainer

    def get_state(self, game):
        head= game.bot[0]
        point_l= Point(head.x -20, head.y)
        point_r= Point(head.x + 20, head.y)
        point_u= Point(head.x, head.y - 20)
        point_d= Point(head.x , head.y + 20)

        dir_l = game.direction == Direction.left
        dir_r =game.direction == Direction.right
        dir_u = game.direction == Direction.up
        dir_d = game.direction == Direction.down

        state = [
            #danger straight 
            (dir_r and game.is_collision(point_r)) or
            (dir_l and game.is_collision(point_l)) or
            (dir_u and game.is_collision(point_u)) or
            (dir_d and game.is_collision(point_d)),

            #danger right 
            (dir_u and game.is_collision(point_r)) or
            (dir_d and game.is_collision(point_l)) or
            (dir_l and game.is_collision(point_u)) or
            (dir_r and game.is_collision(point_d)),
            
            #danger left
            (dir_d and game.is_collision(point_r)) or
            (dir_u and game.is_collision(point_l)) or
            (dir_r and game.is_collision(point_u)) or
            (dir_l and game.is_collision(point_d)),

            #move direction

            dir_l,
            dir_r,
            dir_u,
            dir_d,

             # Move direction (run away from enemies)
            not (dir_l and game.enemy.x < head.x),  # If enemy is to the left, don't go left
            not (dir_r and game.enemy.x > head.x),  # If enemy is to the right, don't go right
            not (dir_u and game.enemy.y < head.y),  # If enemy is above, don't go up
            not (dir_d and game.enemy.y > head.y),  # If enemy is below, don't go down

            # Relative position of enemy (is enemy closer in x or y direction?) 
            game.enemy.x < game.head.x,
            game.enemy.x > game.head.x,
            game.enemy.y < game.enemy.y,
            game.enemy.y > game.enemy.y
            ]

        return np.array(state, dtype=int)


    def remember(self, state, action, reward, next_state, done):
        self.memory.append((state, action, reward, next_state, done))

    def train_long_memory(self):
        if len(self.memory) > BATCH_Size:
            mini_sample = random.sample(self.memroy, BATCH_Size) #return list of tuples
        else:
            mini_sample= self.memroy

        states, actions, rewards, next_states, dones = zip(*mini_sample)
        self.trainer.train_step(states, actions, rewards, next_states, dones)

    def train_short_memory(self, state, action, reward, next_state, done):
        self.trainer.train_step(state, action, reward, next_state, done)

    def get_action(self, state):
        #random moves: tradeoff exploration/exploitation
        self.epsilon= 80 - self.n_games
        final_move = [0,0,0]
        if random.randint(0,200) < self.epsilon:
            move = random.randint(0,2)
            final_move[move]=1
        else:
            state0=torch.tensor(state, dtype=torch.float)
            predicition = self.model(state0)
            move = torch.argmax(predicition).item()
            final_move[move]=1
        return final_move



def train():
    plot_scores = []
    plot_mean_score = []
    total_score = 0
    record= 0
    agent= Agent()
    game= #bot survival

    while True:
        #get old state
        state_old= agent.get_state(game)
        #get move 
        final_move = agent.get_action(state_old)
        #perform move and get new state
        reward, done, score= game.play_step(final_move)
        state_new= agent.get_state(game)

        #train short memory 
        agent.train_short_memory(state_old,final_move,reward, state_new, done)

        #remember 
        agent.remember(state_old,final_move,reward, state_new, done)

        if done: 
            #train long term memory, plot reward
            game.reset
            agent.n_games +=1
            agent.train_long_memory()

            if score >record:
                record = score
                agent.model.save()

            print('Game', agent.n_games, 'Score:', score, 'Record: ', record)

            plot_scores.append(score)
            total_score +=score
            mean_score = total_score / agent.n_games
            plot_mean_scores.append(mean_score)
            plot(plot_scores, plot_mean_score)




if __name__=='main':
    train()